package com.lessrain.project.model {	import se.cambiata.utils.crypt.Simplecrypt;	import com.adobe.serialization.json.JSON;	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.vo.ToolData;	import com.lessrain.project.view.utils.Encrypt;	import com.lessrain.project.view.utils.LessMath;	import com.lessrain.puremvc.shared.model.delegates.ILoadDelegate;	import com.lessrain.puremvc.shared.model.delegates.URLLoaderDelegate;	import org.puremvc.as3.multicore.patterns.proxy.Proxy;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class ToolsProxy extends Proxy {		public static const NAME : String = getQualifiedClassName(ToolsProxy);		public static const TOOLS_LOAD : String = "toolsLoad";		public static const TOOLS_LOADED : String = "toolsLoaded";		public static const TYPE_SUCCESS : String = "typeSuccess";		public static const TYPE_FAILURE : String = "typeFailure";		private var _src : String;		private var _key : String;		private var _facebookId : String;		public function ToolsProxy(fadebookId_ : String) {			_facebookId = fadebookId_;			super(NAME);		}		public function load() : void {			getValidTools();		}		private function getValidTools() : void {			trace('ToolsProxy::getValidTools:');			var request : URLRequest = new URLRequest("php/action/secure/x5ToBf9KoNiSii.php");			request.method = URLRequestMethod.POST;			var variables : URLVariables = new URLVariables();						_key = Encrypt.createRandomKey(LessMath.rand(5, 10));			variables.fbid = _facebookId;			variables.gid = _key;			request.data = variables;			var loader : URLLoader = new URLLoader(request);			loader.addEventListener(Event.COMPLETE, onComplete);//			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.load(request);		}		private function onComplete(event : Event) : void {			trace('ToolsProxy::onComplete:');//			_key = '123456x';			var encoded:String = String(event.target.data);			var jsonString : String = Simplecrypt.decrypt(encoded,_key);			var allTools : Object;			try {				allTools = com.adobe.serialization.json.JSON.decode(jsonString);			} catch(e : Error) {				// TODO REMOVE!!!!				jsonString = '{"1":{"key":"sprayCan","position":"0","price":"0","bought":"false","children":"cap0,cap1,cap2"},"2":{"key":"pen","position":"1","price":"0","bought":"false","children":"pen0,pen1,pen2"},"3":{"key":"roller","position":"2","price":"30","bought":"false","acquisition":"tested","children":"roller0,roller1,roller2"}}';//				jsonString = '{}';				allTools = com.adobe.serialization.json.JSON.decode(jsonString);				//TODO throw visible error			}			data = new Vector.<ToolData>();			for (var id : String in allTools) {				getToolData(data, allTools[id], 0);			}			data.sort(sortOnPosition);			checkComplete();		}				private function sortOnPosition(a : ToolData, b : ToolData) : int {			var aId : int = a.position;			var bId : int = b.position;			if (aId > bId) {				return 1;			} else if (aId < bId) {				return -1;			} else {				return 0;			}		}		private function getToolData(data_ : *, tool : Object, level : int, parent:ToolData = null) : void {			var item : ToolData = new ToolData();			item.key = tool['key'];			item.title = String(ApplicationFacade.getCopy('tool.'+item.key));			item.level = level;			item.parent = parent;			item.price = Number(tool['price']);			item.position = Number(tool['position']);			item.tested =  tool['acquisition'] == "tested";			item.bought =  !item.tested && tool['bought'] == "true";						if (tool['children']){				var children : Array = tool['children'].split(',');					for (var i : int = 0; i < children.length; i++) {					var child:Object = new Object();					child.key = children[i];					child.price = 0;					child.bought = false;					child.position = 0;
					getToolData(item.subtools, child, level+1, item);				}
			}			data_.push(item);		}//		private function getFreeItems(data_ : *, xmlList : XMLList,level:int, parent:ToolData = null) : void {//			for each (var itemNode : XML in xmlList) {//				if (itemNode.name() == 'tool') {//					var item : ToolData = new ToolData();//					item.key = String(itemNode.@key);//					item.title = String(ApplicationFacade.getCopy('tool.'+item.key));//					item.locked = String(itemNode.@locked) == "true";//					item.level = level;//					item.parent = parent;////					var children : XMLList = itemNode.children();////					if (children.length() > 0) {//						getFreeItems(item.subtools,children,level+1, item);//					}//					data_.push(item);//				}//			}//		}				private function checkComplete() : void {			Debug.trace('ToolsProxy::checkComplete:');			if (data) {				sendNotification(TOOLS_LOADED, data, TYPE_SUCCESS);			} else {				sendNotification(TOOLS_LOADED, null, TYPE_FAILURE);			}		}		override public function onRegister() : void {		}		override public function onRemove() : void {		}		protected function get datas() : Vector.<ToolData> {			return data as Vector.<ToolData>;		}		public function set src(src : String) : void {			_src = src;		}	}}