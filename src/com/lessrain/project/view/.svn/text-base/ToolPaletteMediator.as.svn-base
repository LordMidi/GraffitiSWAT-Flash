package com.lessrain.project.view {	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.ToolsProxy;	import com.lessrain.project.model.vo.ColorData;	import com.lessrain.project.model.vo.ToolData;	import com.lessrain.project.view.components.Application;	import com.lessrain.project.view.components.ItemBuyEvent;	import com.lessrain.project.view.components.toolpalette.ToolPalette;	import com.lessrain.project.view.components.toolpalette.ToolPaletteEvent;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class ToolPaletteMediator extends Mediator {			public static const NAME: String = getQualifiedClassName(ToolPaletteMediator);			public function ToolPaletteMediator(toolPalette_: ToolPalette = null){			super(NAME, toolPalette_);			toolPalette.addEventListener(ToolPaletteEvent.CHANGED, onToolChanged);			toolPalette.addEventListener(ItemBuyEvent.BUY, onBuyTool);			toolPalette.addEventListener(ToolPalette.DISTANCE_CHANGED, onDistanceChanged);			toolPalette.addEventListener(MouseEvent.CLICK, onPaletteClicked);		}		private function onPaletteClicked(event : MouseEvent) : void {			sendNotification(ApplicationFacade.PALETTE_CLICKED);		}		private function onDistanceChanged(event : Event) : void {			sendNotification(ApplicationFacade.DISTANCE_CHANGED,toolPalette._distanceControlsDist);		}		private function onToolChanged(event : ToolPaletteEvent) : void {			sendNotification(ApplicationFacade.TOOL_CHANGED,event);		}		private function onBuyTool(event : ItemBuyEvent) : void {			sendNotification(ApplicationFacade.ITEM_BUY,event.itemData);		}			override public function listNotificationInterests(): Array {			var interests:Array = new Array();			interests.push(StateMachine.CHANGED);			interests.push(ToolsProxy.TOOLS_LOADED);			interests.push(ApplicationFacade.COLOR_CHANGED);			interests.push(ApplicationFacade.SHOW_CHOOSE_SURFACE_VIEW);			interests.push(ApplicationFacade.SURFACE_CHOSEN);			interests.push(ApplicationFacade.SURFACE_NOT_AVAILABLE);			interests.push(ApplicationFacade.POST_TO_FACEBOOK);			interests.push(ApplicationFacade.FACEBOOK_POST_DONE);			interests.push(ApplicationFacade.GRAB_MODE);			interests.push(ApplicationFacade.PREVIEW_MODE);			interests.push(ApplicationFacade.ITEM_BOUGHT);			return interests;		}				override public function handleNotification(notification_: INotification): void {			switch( notification_.getName()){				case StateMachine.CHANGED:         					if (notification_.getType()==Application.STATE_MAIN) {						toolPalette.initialize();					}					break;				case ToolsProxy.TOOLS_LOADED:					if (notification_.getType() == ToolsProxy.TYPE_SUCCESS){      						toolPalette.setTools(notification_.getBody() as Vector.<ToolData>);					} else {						Debug.trace('ToolPaletteMediator::handleNotification: TUTORIAL_DATA_LOADED ERROR WHILE LOADING',Debug.ERROR);					}					break;				case ApplicationFacade.COLOR_CHANGED:					toolPalette.displayCurrentColor(notification_.getBody() as ColorData);					break;				case ApplicationFacade.SHOW_CHOOSE_SURFACE_VIEW:				case ApplicationFacade.SURFACE_NOT_AVAILABLE:					toolPalette.active = false;					break;				case ApplicationFacade.SURFACE_CHOSEN: 					toolPalette.active = true;					break;				case ApplicationFacade.POST_TO_FACEBOOK:					toolPalette.listenersActive = false;					break;				case ApplicationFacade.FACEBOOK_POST_DONE:					toolPalette.listenersActive = true;					break;				case ApplicationFacade.GRAB_MODE:				case ApplicationFacade.PREVIEW_MODE:					toolPalette.setInactiveLook(notification_.getBody() as Boolean);					break;				case ApplicationFacade.ITEM_BOUGHT:						var tool:ToolData = notification_.getBody() as ToolData;						if(tool) toolPalette.onItemBought(tool);					break;			}		}				override public function onRegister(): void {					}				override public function onRemove(): void {				}		protected function get toolPalette(): ToolPalette {			return viewComponent as ToolPalette;		}	}}