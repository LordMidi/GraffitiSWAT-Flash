package com.lessrain.project.view {	import com.lessrain.project.model.ApplicationParamsProxy;	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.ColorsProxy;	import com.lessrain.project.model.vo.PaletteData;	import com.lessrain.project.model.vo.SurfaceData;	import com.lessrain.project.view.components.Editor;	import com.lessrain.project.view.components.MenuBar;	import com.lessrain.project.view.components.facebook.FacebookConnector;	import com.lessrain.project.view.components.palette.ColorEvent;	import com.lessrain.project.view.components.toolpalette.ToolPaletteEvent;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class EditorMediator extends Mediator {			public static const NAME: String = getQualifiedClassName(EditorMediator);			public function EditorMediator(editor_: Editor = null){			super(NAME, editor_);			editor.addEventListener(MenuBar.POST_TO_ALBUM, postToAlbum);			editor.addEventListener(MenuBar.POST_TO_BEST_OF, postToBestOf);			editor.addEventListener(MenuBar.POST_TO_FRIEND_WALL, postToFriendsWall);			editor.addEventListener(MenuBar.DOWNLOAD, prepareDownload);			editor.addEventListener(MenuBar.SEND_COLLAB, sendCollab);			editor.addEventListener(MenuBar.SAVE_FOR_LATER, saveForLater);			editor.addEventListener(MenuBar.POST_TO_COMPETITION, sendCompetition);			editor.addEventListener(MenuBar.BACK_TO_CHOOSE, backToChooseSurface);			editor.addEventListener(Editor.READY, onEditorReady);			editor.addEventListener(Editor.SURFACE_NOT_AVAILABLE, onSurfaceNotAvailable);			editor.addEventListener(ColorEvent.CLICK, onColorChosen);			editor.addEventListener(Editor.GRAB_MODE_ON, onGrabModeChanged);			editor.addEventListener(Editor.GRAB_MODE_OFF, onGrabModeChanged);			editor.addEventListener(Editor.PREVIEW_MODE_OFF, onPreviewModeChanged);			editor.addEventListener(Editor.PREVIEW_ENABLED, onPreviewEnabledChanged);			editor.addEventListener(Editor.GRAB_ENABLED, onGrabEnabledChanged);		}		private function onPreviewEnabledChanged(event : Event) : void {			sendNotification(ApplicationFacade.PREVIEW_ENABLED, editor.previewEnalbed);		}		private function onGrabEnabledChanged(event : Event) : void {			Debug.trace('EditorMediator::onGrabEnabledChanged:');			sendNotification(ApplicationFacade.GRAB_ENABLED, editor.grabEnabled);		}				private function onPreviewModeChanged(event : Event) : void {			sendNotification(ApplicationFacade.PREVIEW_MODE, false);		}		private function onGrabModeChanged(event : Event) : void {			Debug.trace('EditorMediator::onGrabModeChanged:'+event.type);			sendNotification(ApplicationFacade.GRAB_MODE, event.type == Editor.GRAB_MODE_ON);		}		private function onColorChosen(event : ColorEvent) : void {			sendNotification(ApplicationFacade.COLOR_CHANGED, event.color);		}		private function onSurfaceNotAvailable(event : Event) : void {			sendNotification(ApplicationFacade.SURFACE_NOT_AVAILABLE, editor.surface.title);			editor.clearSurface();		}		private function onEditorReady(event : Event) : void {			sendNotification(ApplicationFacade.EDITOR_READY);		}		private function prepareDownload(event : Event) : void {			sendNotification(ApplicationFacade.PREPARE_SAVE_IMAGE);		}		private function dowload() : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.SAVE_IMAGE, surfaceKey == "dudes"? editor.tShirtData : editor.mainContentBitmapData, surfaceKey);		}		private function sendCollab(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.SEND_COLLAB, {'bgImage':editor.mainContentBitmapData,'noBgImage':editor.canvasBitmapData}, surfaceKey);		}		private function saveForLater(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.SAVE_FOR_LATER, {'noBgImage':editor.canvasBitmapData}, surfaceKey);		}		private function sendCompetition(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.SEND_COMPETITION, {'bgImage':editor.mainContentBitmapData,'noBgImage':editor.tShirtData}, surfaceKey);		}		private function postToAlbum(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.POST_TO_FACEBOOK, {'image': editor.mainContentBitmapData, 'surface' : surfaceKey}, FacebookConnector.PRIVATE_POST_TYPE);		}		private function postToBestOf(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.POST_TO_FACEBOOK, {'image': editor.mainContentBitmapData, 'surface' : surfaceKey}, FacebookConnector.PUBLIC_POST_TYPE);		}		private function postToFriendsWall(event : Event) : void {			var surfaceKey:String = editor.surface.key;			sendNotification(ApplicationFacade.POST_TO_FACEBOOK, {'image': editor.mainContentBitmapData, 'surface' : surfaceKey}, FacebookConnector.FRIEND_POST_TYPE);		}		private function backToChooseSurface(event : Event) : void {						//sendNotification(ApplicationFacade.SHOW_CHOOSE_SURFACE_VIEW);			//editor.hide();						var request:URLRequest = new URLRequest("index.php?source=game");			navigateToURL(request, "_self");		}			override public function listNotificationInterests(): Array {			var interests:Array = new Array();			interests.push(ColorsProxy.COLORS_LOADED);			interests.push(ApplicationFacade.SURFACE_CHOSEN);			interests.push(ApplicationFacade.FACEBOOK_POST_DONE);			interests.push(ApplicationFacade.TOOL_CHANGED);			interests.push(ApplicationFacade.DISTANCE_CHANGED);			interests.push(ApplicationFacade.SAVE_IMAGE_PREPARED);			interests.push(ApplicationFacade.GRAB_MODE);			interests.push(ApplicationFacade.PREVIEW_MODE);			interests.push(ApplicationFacade.PALETTE_CLICKED);			return interests;		}				override public function handleNotification(notification_: INotification): void {			switch( notification_.getName()){				case ColorsProxy.COLORS_LOADED:					if (notification_.getType() == ColorsProxy.TYPE_SUCCESS){      						editor.setColors(notification_.getBody() as Vector.<PaletteData>);					} else {						Debug.trace('EditorMediator::handleNotification: COLOR_DATA_LOADED ERROR WHILE LOADING',Debug.ERROR);					}					break;				case ApplicationFacade.SURFACE_CHOSEN: 					editor.visible = true;					editor.setSurface(notification_.getBody() as SurfaceData, notification_.getType());					break;				case ApplicationFacade.FACEBOOK_POST_DONE:					editor.reactivateScrollListeners();					if (notification_.getBody() as Boolean) editor.disabledPost(notification_.getType());					break;				case ApplicationFacade.TOOL_CHANGED:					editor.onCapChanged(notification_.getBody() as ToolPaletteEvent);					break;				case ApplicationFacade.DISTANCE_CHANGED:					editor.onDistanceChanged(notification_.getBody() as Number);					break;				case ApplicationFacade.SAVE_IMAGE_PREPARED:					dowload();					break;				case ApplicationFacade.GRAB_MODE:					editor.setGrabMode(Boolean(notification_.getBody()));					break;				case ApplicationFacade.PREVIEW_MODE:					editor.setPreviewMode(Boolean(notification_.getBody()));					break;				case ApplicationFacade.PALETTE_CLICKED:					editor.returnToEditMode();					break;								}		}				override public function onRegister(): void {			var applicationParamsProxy : ApplicationParamsProxy = ApplicationParamsProxy(facade.retrieveProxy(ApplicationParamsProxy.NAME));			MenuBar.fbID = applicationParamsProxy.getFacebookId();					}				override public function onRemove(): void {				}		protected function get editor(): Editor {			return viewComponent as Editor;		}	}}